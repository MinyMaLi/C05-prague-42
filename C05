//C05 ex01
int ft_recursive_factorial(int nb)
{
    if (nb == 1)
    {
        return (1);
    }
    return (nb * ft_recursive_factorial(nb - 1));
}

//ex00
int ft_iterative_factorial(int nb)
{
    int temp;

    temp = nb;
    if (nb == 1)
    {
        return (1);
    }
    else 
    {
        while (temp != 1)
        {
            nb = nb * (temp -1);
            temp --;
        }
    }
    return (nb);
}

//ex02
int ft_iterative_power(int nb, int power)
{
    int temp;


    if (power <= 0)
    return (0);
    else if (power == 0 && nb ==0)
    return(1);
    else if(power >= 0)
    {
        while (power != 1)
        {
            temp = nb;
            nb = temp *nb;
            power --;
        } 
        return(temp);
    }
}
//ex03
int ft_recursive_power(int nb, int power)
{
    int temp;

    if (power < 0) 
    return (0);
    else if (power == 0)
    return(1);
    else if (power >= 0)
    {
        temp = power;
        while (temp >= 1)
        {
            return (nb * ft_recursive_power(nb, (temp - 1)));
        } 
    }
}
//ex04
int ft_fibonacci(int index)
{
    if (index < 0)
    return(-1);
    if (index ==0)
    return(0);
    if (index == 1)
    return(1);
    return(ft_fibonacci(index -1) + ft_fibonacci(index - 2));
}    

//ex05
int ft_sqrt(int nb)
{
    int i;

    i = 1;
    if (nb == 0)
    return (0);
    while ((i * i) != nb)
    {
        if (i == nb)
        {
            return(0);
        }
        else{
            i++;
        }     
    }    
    if (i == nb)
    return(0);
    return (i);
}

//ex06
int ft_is_prime(int nb)
{
    int i;

    i = 3;
    if (nb == 0 || nb == 1)
    return (0);
    while (i != nb)
    {
        if (nb % 2 == 0)
        {
            return (0);
        }
        if (nb % i == 0)
        {
            return(0);
        }
    i++;
    i++;
    }
    return(1);
}

//ex07
ft_find_next_prime(int nb)
{
    int i;
    int temp;

    temp = 0;
    i = 3;
    if(nb <= 1)
    return(2);

    nb++;
    if (nb % 2 ==0)
    nb++;

    while (1)
    {
        temp = 0;
        for (i = 2; i <= nb / 2; i++) 
        {
            if (nb % i == 0) 
            {
                temp = 1;
                break;  
            }
        }
        if (temp == 0)
            return nb;
        nb += 2;

    }  
    return(nb)
}


#include <stdio.h>

int main()
{
    printf("%d", ft_iterative_factorial(30));
}







